[
  {
    "path": "posts/2021-02-03-current-state-of-experimental-design-r-packages/",
    "title": "Current state of R packages for the design of experiments",
    "description": "Your analytical toolkit matters very little if the data are no good. Ideally you want to know to how the data were collected before delving into the analysis of the data; better yet, get involved _before_ the collection of data and design its collection. In this post I explore some of the top downloaded R packages for the design of experiments and analysis of experimental data.",
    "author": [
      {
        "name": "Emi Tanaka",
        "url": "https://emitanaka.org"
      }
    ],
    "date": "2021-02-03",
    "categories": [
      "experimental design",
      "R"
    ],
    "contents": "\n\nContents\nData collection\nExperimental data\n\nDesign and analysis of experiments\nBigram of DoE package titles and descriptions\nNetwork of DoE package imports and dependencies\nCRAN download logs\nTop 5 DoE packages\n\nR-packages\nAlgDesign\nagricolae\nlhs\nez\nDoE.base\n\n\n\n\n\n.toggle-code {\n  display: none;\n}\n\nbutton {\n  border-radius: 10px;\n  color: var(--aside-color, rgba(0, 0, 0, 0.6));\n  border-color: var(--aside-color, rgba(0, 0, 0, 0.6));\n}\n\n.scroll-output {\n  height: 200px;\n  overflow-y: scroll!important;\n}\n\n\n\n\nClick Me\n\nto see all code in this article. You can also find the link to the source Rmd file at the footer.\n\n\n\n\nlibrary(tidyverse)\nlibrary(rvest)\nlibrary(lubridate)\nlibrary(cranlogs)\nlibrary(glue)\nlibrary(scales)\nlibrary(colorspace)\nlibrary(tidytext)\nlibrary(pluralize)\nlibrary(kableExtra)\nlibrary(igraph)\nlibrary(ggraph)\n\nmyggtheme <- \n  theme(panel.background = element_rect(fill = NA),\n        panel.grid = element_line(color = \"#f6e5ee\"),\n        axis.text = element_text(color = \"#79003e\"),\n        axis.line = element_line(color = \"#79003e\", size = 0.7),\n        axis.ticks.length = unit(1.4, \"mm\"),\n        axis.ticks = element_line(color = \"#79003e\", size = 0.7),\n        axis.title = element_text(color = \"#79003e\", face = \"bold\"),\n        strip.background = element_rect(color = \"#79003e\",\n                                        fill = \"#AD0059\"),\n        strip.text = element_text(color = \"white\"),\n        plot.title.position = \"plot\",\n        plot.title = element_text(color = \"#79003e\", face = \"bold\")) \n\n\n\n\n\n\n\n# Thanks to Dirk Eddelbuettel's answer on SO:\n# https://stackoverflow.com/questions/11560865/list-and-description-of-all-packages-in-cran-from-within-r\nurl <- paste0(getOption(\"repos\")[\"CRAN\"], \"web/packages/packages.rds\")\ndb <- readRDS(url(url)) %>% \n  as.data.frame()\n\n\n\n\n\n\n\nnanalysis <- db %>% \n  filter(str_detect(tolower(Title), \"analysis\")) %>% \n  nrow()\n\nndesign <- db %>% \n  filter(str_detect(tolower(Title), \"design\")) %>% \n  nrow()\n\n\n\n\nData collection\nAs many know, it doesn’t matter how good your analytical tools is if your data are rubbish. This sentiment is often captured in the expression “garbage in, garbage out”. It’s something we all seem to know but there is still a tendency for many of us to place a greater focus on the analysis1. This is perhaps all natural given that a potential for discovery is just so much more exciting than ensuring the quality of the collected data.\nSo what is considered as good quality data? A lack of error in the data? Data containing enough range of variables and sample size for the downstream analysis? Giving an explicit definition of a good quality data is a fraught exercise, but if you know how the data were collected then you can better perform the initial data analysis (Chatfield 1985) to weed out (or fix) potential poor quality data. This step will likely get more value out of the data than fitting complex models to poor quality data.\nBetter than knowing how the data were collected, if you can design the collection of data so that it’s optimised for the purpose of the analysis2, then you can potentially get even a better value out of your data. Not all data collection starts with an explicit analytical plan though. Furthermore, you may have very little control of how the data are collected. Often these are observational data or making a secondary use of experimental data. This article will focus on data collection of an experiment where you have some control of the collection process.\nExperimental data\nAll experiments are conducted with some objective in mind. This could be that a scientist may wish to test their hypothesis, a manufacturer wants to know which manufacturing process is better or a researcher wants to understand some cause-and-effect relationships. A characteristic part of an experiment is that the experimenter has control over some explanatory variables. In a comparative experiment, the control is over the allocation of treatments to subjects. Designing an experiment in the statistics discipline usually focus on this allocation, although it’s important to keep in mind that there are other decision factors in an experiment.\nData that are collected from experiments are what we refer to as experimental data. Because it was collected with some objective in mind followed by some data collection plan, experimental data are often thought of to be better quality than observational data. But then again if you can’t quantify the quality of data, you can’t really tell. Certain scientific claims (e.g. causation, better treatment) can only be substantiated by experiments and so experimental data is held to a higher standard in general.\nDesign and analysis of experiments\n\n\n\ndat_DoE <- read_html(\"https://cran.r-project.org/web/views/ExperimentalDesign.html\")\ndate_download <- Sys.Date()\ncran_names <- available.packages() %>% \n  rownames() %>% \n  unique() # it should be unique\ndoe_pkgs <- dat_DoE %>% \n  html_nodes(\"li\") %>% \n  html_nodes(\"a\") %>% \n  html_text() %>% \n  .[. %in% cran_names] %>% \n  unique()\n\ndat_survey <- read_html(\"https://cran.r-project.org/web/views/OfficialStatistics.html\")\nsurvey_pkgs <- dat_survey %>% \n  html_nodes(\"li\") %>% \n  html_nodes(\"a\") %>% \n  html_text() %>% \n  .[. %in% cran_names] %>% \n  unique()\n\n\n\n\nThere are all together 113 R-packages in the CRAN Task View of Design of Experiments & Analysis of Experimental Data as of 2021-02-07.3 I’m going to refer these packages as DoE packages, although there are some packages in the mix that are more about the analysis of experimental data rather than the design of experiments and there are some packages that are missing in the list (e.g. DeclareDesign). The DoE packages make up about 0.7% of the 17,036 packages available in CRAN.\nThe DoE packages don’t include survey design. These instead belong to the CRAN Task View of Official Statistics & Survey Methodology which contains 132 packages. While some surveys are part of an experimental study, most often they generate observational data.\nBelow I have a number of different analysis for these DoE packages. If you push the button on the top right corner of this article, you can toggle the display for the code or alternatively you can have a look at the source Rmd document.\nBigram of DoE package titles and descriptions\n\n\n\nstop_words_ext <- c(stop_words$word, \"doi\")\n\ndoe_db <- db %>% \n  filter(Package %in% doe_pkgs) %>% \n  mutate(Description = str_replace_all(Description, \"\\n\", \" \"),\n         Description = str_squish(Description),\n         Title = str_replace_all(Title, \"\\n\", \" \"))\n\nbigram_tab <- function(data, col) {\n  data %>% \n    unnest_tokens(word, {{col}}, token = \"ngrams\", n = 2) %>% \n    separate(word, c(\"word1\", \"word2\"), sep = \" \") %>% \n    mutate(word1 = singularize(word1),\n           word2 = singularize(word2)) %>% \n    # don't count the same bigram within the same package\n    distinct(Package, word1, word2) %>% \n    filter(!word1 %in% stop_words_ext,\n           !word2 %in% stop_words_ext,\n           !str_detect(word1, \"^[0-9.]+$\"),\n           !str_detect(word2, \"^[0-9.]+$\")) %>% \n    count(word1, word2, sort = TRUE)  \n}\n\n\n\n\n\n\n\nbigram_tab(doe_db, Description) %>% \n  filter(n > 4) %>% \n  mutate(word = paste(word1, word2)) %>% \n  select(word, n) %>% \n  kbl(caption = \"The bigram of the R-package _descriptions_ as provided in the DESCRIPTION file in CRAN.\", \n               col.names = c(\"Bigram\", \"Count\")) %>% \n  kable_classic(full_width = FALSE)\n\n\n\n\n\n\n\nbigram_tab(doe_db, Title) %>% \n  filter(n > 3) %>% \n  mutate(word = paste(word1, word2)) %>% \n  select(word, n) %>% \n  kbl(caption = \"The bigram of the R-package _titles_ as provided in the DESCRIPTION file in CRAN.\", \n               col.names = c(\"Bigram\", \"Count\")) %>% \n  kable_classic(full_width = FALSE)\n\n\n\n\nTable 1 shows the most common bigrams in the title of the DoE packages. It’s perhaps not surprising but the words “optimal design” and “experimental design” are the top. It’s also likely that the words “design of experiments” appears often but because this is a bigram (two consecutive words) so it doesn’t appear. You might then wonder if that’s the case words like “design of” or “of experiments” should make an appearance, however “of” is a stop word and these are filtered out otherwise unwanted bigrams come up on the top.\nThere are couple of words like “clinical trial” and “dose finding” that suggests applications in medical experiments, as well as “microarray experiment” that suggests application in bioinformatics.\n\n\nTable 1: The bigram of the R-package titles as provided in the DESCRIPTION file in CRAN.\n\n\nBigram\n\n\nCount\n\n\noptimal design\n\n\n10\n\n\nexperimental design\n\n\n8\n\n\nclinical trial\n\n\n5\n\n\ndose finding\n\n\n5\n\n\nsequential design\n\n\n5\n\n\nblock design\n\n\n4\n\n\nmicroarray experiment\n\n\n4\n\n\nresponse surface\n\n\n4\n\n\nThe title alone might be too succinct for text analysis so I also had a look at the most common bigrams in the description of the DoE packages as shown in Table 2. The counts in Table 2 (and also Table 1) is across the DoE packages. To be more clear, even if the bigram is mentioned multiple times within the description, it’s only counted once per package. This removes the inflation of the counts due to one package mentioning the same bigram over and over again.\nAgain not surprisingly “experimental design” and “optimal design” comes on top in the DoE package descriptions. The words “graphical user” and “user interface” implies that the trigram “graphical user interface” was probably common.\n\n\nTable 2: The bigram of the R-package descriptions as provided in the DESCRIPTION file in CRAN.\n\n\nBigram\n\n\nCount\n\n\nexperimental design\n\n\n11\n\n\noptimal design\n\n\n10\n\n\npackage provide\n\n\n7\n\n\nresponse surface\n\n\n7\n\n\nfactorial design\n\n\n6\n\n\ngraphical user\n\n\n6\n\n\nuser interface\n\n\n6\n\n\nblock design\n\n\n5\n\n\ncontour plot\n\n\n5\n\n\ndesign based\n\n\n5\n\n\neffect model\n\n\n5\n\n\nfractional factorial\n\n\n5\n\n\nmicroarray experiment\n\n\n5\n\n\nmixed effect\n\n\n5\n\n\nprovide function\n\n\n5\n\n\nsample size\n\n\n5\n\n\nsequential design\n\n\n5\n\n\nNetwork of DoE package imports and dependencies\n\n\n\ndoe_imports <- doe_db %>% \n  mutate(Depends = str_replace_all(Depends, \"\\n\", \" \"),\n         Depends = str_replace_all(Depends, fixed(\"(\"), \" (\"),\n         Imports = str_replace_all(Imports, \"\\n\", \" \"),\n         Imports = str_replace_all(Imports, fixed(\"(\"), \" (\"),\n         imports = str_c(Depends, Imports, sep = \",\"),\n         imports = str_split(imports, \",\"),\n         imports = map(imports, ~{\n                    str_squish(.x) %>% \n                      word() %>% \n                      .[.!=\"\"]}\n           ),\n         imports_doe = map(imports, ~.x[.x %in% doe_pkgs])) %>% \n  select(Package, imports_doe) %>% \n  unnest_longer(imports_doe) %>% \n  filter(!is.na(imports_doe)) %>% \n  rename(from = imports_doe, to = Package) %>% \n  select(from, to)\n\n\n\n\nFigure 1 shows the imports and dependency between the DoE packages. We can see here that DoE.wrapper imports a fair number of DoE packages that results in the major network cluster see in Figure 1. AlgDesign and DoE.base are imported into four other DoE packages so form an important base in the DoE world.\n\n\n\ngraph_from_data_frame(doe_imports) %>% \n  ggraph(layout = 'fr') +\n  geom_edge_link(aes(start_cap = label_rect(node1.name),\n                     end_cap = label_rect(node2.name)), \n                 arrow = arrow(length = unit(2, 'mm')),\n                 color = \"#79003e\") + \n  geom_node_text(aes(label = name),\n                 color = \"#79003e\") +\n  theme(panel.background = element_rect(fill = \"#f6e5ee\",\n                                        color = \"#79003e\"),\n        plot.margin = margin(20, 20, 20, 20))\n\n\n\n\n\n\n\n\nFigure 1: The network of imports and dependency among DoE packages alone. Each node represents a DoE package. DoE packages with no imports or dependency on other DoE packages are excluded. Each arrow represents the relationship between the packages such that the package on the tail is used by package on the head of the arrow.\n\n\n\nCRAN download logs\n\n\n\nend <- Sys.Date() - 2 # usually 1-2 days are not available yet\nstart <- end - years(5) + days(2)\ndldat <- cran_downloads(doe_pkgs, from = start, to = end)\n\n\n\n\n\n\n\ndldat %>% \n    group_by(package) %>% \n    summarise(total = sum(count)) %>%\n  ggplot(aes(total)) + \n  geom_histogram(color = \"white\", fill = \"#AD0059\") + \n  scale_x_log10(label = comma) + \n  myggtheme + \n  labs(x = glue(\"Total download counts from {start} to {end}\"),\n       y = \"Number of packages\") +\n  scale_y_continuous(expand = c(0, 0))\n\n\n\n\nFigure 2 shows the distribution of the total download counts over the last 5 years4 of the DoE packages. This graph doesn’t take into account that some DoE packages may only have been on CRAN in the last 5 years so the counts are in favour of DoE packages that’s been on CRAN longer.\n\n\n\n\nFigure 2: Histogram of the total download count over last 5 years of the DoE packages.\n\n\n\nTop 5 DoE packages\n\n\n\nntop <- 5\n\ntop5sum_df <- dldat %>% \n  group_by(package) %>% \n  summarise(total = sum(count)) %>% \n  ungroup() %>% \n  slice_max(order_by = total, n = ntop)\n\ntop5 <- top5sum_df %>% \n  pull(package) \n\ntop5_df <- dldat %>% \n  filter(package %in% top5) %>% \n  mutate(package = fct_reorder(package, count, function(x) -sum(x))) \n\n\n\n\nThe top 5 downloaded DoE packages at the time of this writing are AlgDesign, agricolae, lhs, ez, and DoE.base. You can see the download counts in Figure 3.\n\n\n\ntop5sum_df %>% \n  mutate(package = fct_reorder(package, total)) %>% \n  ggplot(aes(total, package)) +\n  geom_col(aes(fill = package)) +\n  labs(x = glue(\"Total downloads from {start} to {end}\"),\n       y = \"Package\") + \n  scale_x_continuous(labels = comma, expand = c(0, 0)) +\n  myggtheme + \n  scale_fill_discrete_qualitative(rev = TRUE) + \n  guides(fill = FALSE)\n\n\n\n\n\n\n\n\nFigure 3: The above barplot shows the total downloads of the top 5 downloaded DoE packages from the period 2016-02-07 to 2021-02-05.\n\n\n\nWe can have a look at further examination of the top 5 DoE packages by looking at the daily download counts as shown in Figure 3. The download counts are the raw values and these include downloads by CRAN mirror and bots. There is a noticeable spike when there is an update to the CRAN package. This is partly because when there is a new version of the package, when you install other packages that depend or import it then R will prompt you to install the new version. This means that the download counts are inflated and to some extent you can artificially boost them by making regular CRAN updates. The adjustedcranlogs (Morgan-Wall 2017) makes a nice attempt to adjust the raw counts based on a certain heuristic. I didn’t use it since the adjustment is stochastic and I appear to have hit a bug.\n\n\n\npkg_url <- \"https://cran.r-project.org/web/packages/{pkg}/index.html\"\npkg_archive <- \"https://cran.r-project.org/src/contrib/Archive/{pkg}/\"\npkg_updates <- map(top5, function(pkg) {\n    last_update <- read_html(glue(pkg_url)) %>% \n      html_table() %>% \n      .[[1]] %>% \n      filter(X1==\"Published:\") %>% \n      pull(X2) %>% \n      ymd()\n      \n    archive_dates <- tryCatch({ \n        read_html(glue(pkg_archive)) %>% \n          html_table() %>%\n          .[[1]] %>% \n          pull(`Last modified`) %>% \n          ymd_hm() %>% \n          na.omit() %>% \n          as.Date()\n      }, error = function(e) {\n        NULL\n      })\n    c(archive_dates, last_update)\n  })\nnames(pkg_updates) <- top5\n\nupdates <- unlist(pkg_updates) %>% \n  enframe(\"package\", \"update\") %>% \n  # unlist converts date to integers\n  mutate(update = as.Date(update, origin = \"1970-01-01\"),\n         # need to get rid of the numbers appended to pkg names\n         package = str_extract(package, paste0(top5, collapse=\"|\")),\n         package = factor(package, levels = top5)) %>% \n  filter(between(update, start, end))\n\n\n\n\n\n\n\nggplot(top5_df, aes(date, count, color = package)) +\n  # add shadow lines\n  geom_line(data = rename(top5_df, package2 = package), \n            color = \"gray\", aes(group = package2)) +\n  # add date when package was updated\n  geom_vline(data = updates, aes(xintercept = update),\n             linetype = \"dashed\", color = \"#79003e\") + \n  # the trend line\n  geom_line() +\n  scale_y_log10() +\n  facet_grid(package ~ .) + \n  labs(title = glue(\"Top 5 downloaded DoE packages from {start} to {end}\")) + \n  scale_color_discrete_qualitative() +\n  guides(color = FALSE) +\n  myggtheme\n\n\n\n\n\n\n\n\nFigure 4: The above plot shows the daily downloads of the top 5 downloaded DoE packages from the period 2016-02-07 to 2021-02-05. The vertical dotted bar corresponds to the date that a new version of the corresponding package was released on CRAN.\n\n\n\nR-packages\nHere we have a closer look at the functions of the top 5 downloaded DoE packages below ordered by their download counts.\nAlgDesign  CRAN  GitHub  Wheeler (2019)Algorithmic Experimental Design\nOriginally written by  Bob Wheeler but  Jerome Braun have taken over maintenance of the package.\nagricolae  CRAN  de Mendiburu (2020)Statistical Procedures for Agricultural Research\nWritten and maintained by  Felipe de Mendiburu\nlhs  CRAN  GitHub  Carnell (2020)Latin Hypercube Samples\nWritten and maintained by  Rob Carnell\nez  CRAN  GitHub  Lawrence (2016)Easy Analysis and Visualization of Factorial Experiments\nWritten and maintained by  Michael A. Lawrence\nDoE.base  CRAN  Grömping (2018)Full Factorials, Orthogonal Arrays and Base Utilities for DoE Packages\nWritten and maintained by  Ulrike Groemping.\n\nInterestingly these top 5 DoE packages have only one active author. Bob Wheeler doesn’t seem to actively contribute to AlgDesign any longer; and there are two contributors for DoE.base but are not listed as authors.\nBefore we look at the packages, let’s set a seed so we can reproduce the results.\n\n\nset.seed(2021)\n\n\n\nAlgDesign\nTo start off, we begin with the most downloaded DoE package, AlgDesign. The examples below are taken directly from the vignette of the AlgDesign package.\n\n\nlibrary(AlgDesign)\n\n\n\nYou can create a balanced incomplete block design using the optBlock function. It’s using an optimal design framework where the default criterion is D criterion and the implied model is given in the first argument.\n\n\nBIB <- optBlock(~ ., \n                withinData = factor(1:7), \n                blocksize = rep(3, 7))\nBIB\n\n\n$D\n[1] 0.08033556\n\n$diagonality\n[1] 0.692\n\n$Blocks\n$Blocks$B1\n  X1\n1  1\n3  3\n4  4\n\n$Blocks$B2\n  X1\n2  2\n4  4\n5  5\n\n$Blocks$B3\n  X1\n4  4\n6  6\n7  7\n\n$Blocks$B4\n  X1\n3  3\n5  5\n6  6\n\n$Blocks$B5\n  X1\n2  2\n3  3\n7  7\n\n$Blocks$B6\n  X1\n1  1\n2  2\n6  6\n\n$Blocks$B7\n  X1\n1  1\n5  5\n7  7\n\n\n$design\n   X1\n1   1\n3   3\n4   4\n2   2\n41  4\n5   5\n42  4\n6   6\n7   7\n31  3\n51  5\n61  6\n21  2\n32  3\n71  7\n11  1\n22  2\n62  6\n12  1\n52  5\n72  7\n\n$rows\n [1] 1 3 4 2 4 5 4 6 7 3 5 6 2 3 7 1 2 6 1 5 7\n\nAlgDesign also includes helper functions to generate a factorial structure.\n\n\ndat <- gen.factorial(2, 7)\ndat\n\n\n    X1 X2 X3 X4 X5 X6 X7\n1   -1 -1 -1 -1 -1 -1 -1\n2    1 -1 -1 -1 -1 -1 -1\n3   -1  1 -1 -1 -1 -1 -1\n4    1  1 -1 -1 -1 -1 -1\n5   -1 -1  1 -1 -1 -1 -1\n6    1 -1  1 -1 -1 -1 -1\n7   -1  1  1 -1 -1 -1 -1\n8    1  1  1 -1 -1 -1 -1\n9   -1 -1 -1  1 -1 -1 -1\n10   1 -1 -1  1 -1 -1 -1\n11  -1  1 -1  1 -1 -1 -1\n12   1  1 -1  1 -1 -1 -1\n13  -1 -1  1  1 -1 -1 -1\n14   1 -1  1  1 -1 -1 -1\n15  -1  1  1  1 -1 -1 -1\n16   1  1  1  1 -1 -1 -1\n17  -1 -1 -1 -1  1 -1 -1\n18   1 -1 -1 -1  1 -1 -1\n19  -1  1 -1 -1  1 -1 -1\n20   1  1 -1 -1  1 -1 -1\n21  -1 -1  1 -1  1 -1 -1\n22   1 -1  1 -1  1 -1 -1\n23  -1  1  1 -1  1 -1 -1\n24   1  1  1 -1  1 -1 -1\n25  -1 -1 -1  1  1 -1 -1\n26   1 -1 -1  1  1 -1 -1\n27  -1  1 -1  1  1 -1 -1\n28   1  1 -1  1  1 -1 -1\n29  -1 -1  1  1  1 -1 -1\n30   1 -1  1  1  1 -1 -1\n31  -1  1  1  1  1 -1 -1\n32   1  1  1  1  1 -1 -1\n33  -1 -1 -1 -1 -1  1 -1\n34   1 -1 -1 -1 -1  1 -1\n35  -1  1 -1 -1 -1  1 -1\n36   1  1 -1 -1 -1  1 -1\n37  -1 -1  1 -1 -1  1 -1\n38   1 -1  1 -1 -1  1 -1\n39  -1  1  1 -1 -1  1 -1\n40   1  1  1 -1 -1  1 -1\n41  -1 -1 -1  1 -1  1 -1\n42   1 -1 -1  1 -1  1 -1\n43  -1  1 -1  1 -1  1 -1\n44   1  1 -1  1 -1  1 -1\n45  -1 -1  1  1 -1  1 -1\n46   1 -1  1  1 -1  1 -1\n47  -1  1  1  1 -1  1 -1\n48   1  1  1  1 -1  1 -1\n49  -1 -1 -1 -1  1  1 -1\n50   1 -1 -1 -1  1  1 -1\n51  -1  1 -1 -1  1  1 -1\n52   1  1 -1 -1  1  1 -1\n53  -1 -1  1 -1  1  1 -1\n54   1 -1  1 -1  1  1 -1\n55  -1  1  1 -1  1  1 -1\n56   1  1  1 -1  1  1 -1\n57  -1 -1 -1  1  1  1 -1\n58   1 -1 -1  1  1  1 -1\n59  -1  1 -1  1  1  1 -1\n60   1  1 -1  1  1  1 -1\n61  -1 -1  1  1  1  1 -1\n62   1 -1  1  1  1  1 -1\n63  -1  1  1  1  1  1 -1\n64   1  1  1  1  1  1 -1\n65  -1 -1 -1 -1 -1 -1  1\n66   1 -1 -1 -1 -1 -1  1\n67  -1  1 -1 -1 -1 -1  1\n68   1  1 -1 -1 -1 -1  1\n69  -1 -1  1 -1 -1 -1  1\n70   1 -1  1 -1 -1 -1  1\n71  -1  1  1 -1 -1 -1  1\n72   1  1  1 -1 -1 -1  1\n73  -1 -1 -1  1 -1 -1  1\n74   1 -1 -1  1 -1 -1  1\n75  -1  1 -1  1 -1 -1  1\n76   1  1 -1  1 -1 -1  1\n77  -1 -1  1  1 -1 -1  1\n78   1 -1  1  1 -1 -1  1\n79  -1  1  1  1 -1 -1  1\n80   1  1  1  1 -1 -1  1\n81  -1 -1 -1 -1  1 -1  1\n82   1 -1 -1 -1  1 -1  1\n83  -1  1 -1 -1  1 -1  1\n84   1  1 -1 -1  1 -1  1\n85  -1 -1  1 -1  1 -1  1\n86   1 -1  1 -1  1 -1  1\n87  -1  1  1 -1  1 -1  1\n88   1  1  1 -1  1 -1  1\n89  -1 -1 -1  1  1 -1  1\n90   1 -1 -1  1  1 -1  1\n91  -1  1 -1  1  1 -1  1\n92   1  1 -1  1  1 -1  1\n93  -1 -1  1  1  1 -1  1\n94   1 -1  1  1  1 -1  1\n95  -1  1  1  1  1 -1  1\n96   1  1  1  1  1 -1  1\n97  -1 -1 -1 -1 -1  1  1\n98   1 -1 -1 -1 -1  1  1\n99  -1  1 -1 -1 -1  1  1\n100  1  1 -1 -1 -1  1  1\n101 -1 -1  1 -1 -1  1  1\n102  1 -1  1 -1 -1  1  1\n103 -1  1  1 -1 -1  1  1\n104  1  1  1 -1 -1  1  1\n105 -1 -1 -1  1 -1  1  1\n106  1 -1 -1  1 -1  1  1\n107 -1  1 -1  1 -1  1  1\n108  1  1 -1  1 -1  1  1\n109 -1 -1  1  1 -1  1  1\n110  1 -1  1  1 -1  1  1\n111 -1  1  1  1 -1  1  1\n112  1  1  1  1 -1  1  1\n113 -1 -1 -1 -1  1  1  1\n114  1 -1 -1 -1  1  1  1\n115 -1  1 -1 -1  1  1  1\n116  1  1 -1 -1  1  1  1\n117 -1 -1  1 -1  1  1  1\n118  1 -1  1 -1  1  1  1\n119 -1  1  1 -1  1  1  1\n120  1  1  1 -1  1  1  1\n121 -1 -1 -1  1  1  1  1\n122  1 -1 -1  1  1  1  1\n123 -1  1 -1  1  1  1  1\n124  1  1 -1  1  1  1  1\n125 -1 -1  1  1  1  1  1\n126  1 -1  1  1  1  1  1\n127 -1  1  1  1  1  1  1\n128  1  1  1  1  1  1  1\n\nThis can be an input to specify the design using another function, say with optFederov which uses Federov’s exchange algorithm to generate the design.\n\n\ndesF <- optFederov(~ .^2, \n                   data = dat,\n                   nTrials = 32,\n                   nRepeats = 100)\ndesF\n\n\n$D\n[1] 0.8867999\n\n$A\n[1] 1.296784\n\n$Ge\n[1] 0.412\n\n$Dea\n[1] 0.241\n\n$design\n    X1 X2 X3 X4 X5 X6 X7\n4    1  1 -1 -1 -1 -1 -1\n5   -1 -1  1 -1 -1 -1 -1\n10   1 -1 -1  1 -1 -1 -1\n11  -1  1 -1  1 -1 -1 -1\n16   1  1  1  1 -1 -1 -1\n17  -1 -1 -1 -1  1 -1 -1\n23  -1  1  1 -1  1 -1 -1\n28   1  1 -1  1  1 -1 -1\n30   1 -1  1  1  1 -1 -1\n33  -1 -1 -1 -1 -1  1 -1\n38   1 -1  1 -1 -1  1 -1\n44   1  1 -1  1 -1  1 -1\n50   1 -1 -1 -1  1  1 -1\n51  -1  1 -1 -1  1  1 -1\n56   1  1  1 -1  1  1 -1\n61  -1 -1  1  1  1  1 -1\n66   1 -1 -1 -1 -1 -1  1\n67  -1  1 -1 -1 -1 -1  1\n72   1  1  1 -1 -1 -1  1\n76   1  1 -1  1 -1 -1  1\n77  -1 -1  1  1 -1 -1  1\n84   1  1 -1 -1  1 -1  1\n86   1 -1  1 -1  1 -1  1\n90   1 -1 -1  1  1 -1  1\n95  -1  1  1  1  1 -1  1\n100  1  1 -1 -1 -1  1  1\n105 -1 -1 -1  1 -1  1  1\n110  1 -1  1  1 -1  1  1\n111 -1  1  1  1 -1  1  1\n117 -1 -1  1 -1  1  1  1\n123 -1  1 -1  1  1  1  1\n128  1  1  1  1  1  1  1\n\n$rows\n [1]   4   5  10  11  16  17  23  28  30  33  38  44  50  51  56  61\n[17]  66  67  72  76  77  84  86  90  95 100 105 110 111 117 123 128\n\nIf you want to further randomise within blocks, you can pass the above result to optBlock.\n\n\ndesFBlk <- optBlock(~ .^2, \n                    withinData = desF$design,\n                    blocksizes = rep(8, 4),\n                    nRepeats = 20)\n\ndesFBlk\n\n\n$D\n[1] 0.8049815\n\n$diagonality\n[1] 0.836\n\n$Blocks\n$Blocks$B1\n    X1 X2 X3 X4 X5 X6 X7\n4    1  1 -1 -1 -1 -1 -1\n17  -1 -1 -1 -1  1 -1 -1\n23  -1  1  1 -1  1 -1 -1\n33  -1 -1 -1 -1 -1  1 -1\n77  -1 -1  1  1 -1 -1  1\n84   1  1 -1 -1  1 -1  1\n90   1 -1 -1  1  1 -1  1\n123 -1  1 -1  1  1  1  1\n\n$Blocks$B2\n    X1 X2 X3 X4 X5 X6 X7\n10   1 -1 -1  1 -1 -1 -1\n16   1  1  1  1 -1 -1 -1\n28   1  1 -1  1  1 -1 -1\n50   1 -1 -1 -1  1  1 -1\n61  -1 -1  1  1  1  1 -1\n67  -1  1 -1 -1 -1 -1  1\n86   1 -1  1 -1  1 -1  1\n100  1  1 -1 -1 -1  1  1\n\n$Blocks$B3\n    X1 X2 X3 X4 X5 X6 X7\n5   -1 -1  1 -1 -1 -1 -1\n11  -1  1 -1  1 -1 -1 -1\n30   1 -1  1  1  1 -1 -1\n44   1  1 -1  1 -1  1 -1\n56   1  1  1 -1  1  1 -1\n66   1 -1 -1 -1 -1 -1  1\n95  -1  1  1  1  1 -1  1\n110  1 -1  1  1 -1  1  1\n\n$Blocks$B4\n    X1 X2 X3 X4 X5 X6 X7\n38   1 -1  1 -1 -1  1 -1\n51  -1  1 -1 -1  1  1 -1\n72   1  1  1 -1 -1 -1  1\n76   1  1 -1  1 -1 -1  1\n105 -1 -1 -1  1 -1  1  1\n111 -1  1  1  1 -1  1  1\n117 -1 -1  1 -1  1  1  1\n128  1  1  1  1  1  1  1\n\n\n$design\n    X1 X2 X3 X4 X5 X6 X7\n4    1  1 -1 -1 -1 -1 -1\n17  -1 -1 -1 -1  1 -1 -1\n23  -1  1  1 -1  1 -1 -1\n33  -1 -1 -1 -1 -1  1 -1\n77  -1 -1  1  1 -1 -1  1\n84   1  1 -1 -1  1 -1  1\n90   1 -1 -1  1  1 -1  1\n123 -1  1 -1  1  1  1  1\n10   1 -1 -1  1 -1 -1 -1\n16   1  1  1  1 -1 -1 -1\n28   1  1 -1  1  1 -1 -1\n50   1 -1 -1 -1  1  1 -1\n61  -1 -1  1  1  1  1 -1\n67  -1  1 -1 -1 -1 -1  1\n86   1 -1  1 -1  1 -1  1\n100  1  1 -1 -1 -1  1  1\n5   -1 -1  1 -1 -1 -1 -1\n11  -1  1 -1  1 -1 -1 -1\n30   1 -1  1  1  1 -1 -1\n44   1  1 -1  1 -1  1 -1\n56   1  1  1 -1  1  1 -1\n66   1 -1 -1 -1 -1 -1  1\n95  -1  1  1  1  1 -1  1\n110  1 -1  1  1 -1  1  1\n38   1 -1  1 -1 -1  1 -1\n51  -1  1 -1 -1  1  1 -1\n72   1  1  1 -1 -1 -1  1\n76   1  1 -1  1 -1 -1  1\n105 -1 -1 -1  1 -1  1  1\n111 -1  1  1  1 -1  1  1\n117 -1 -1  1 -1  1  1  1\n128  1  1  1  1  1  1  1\n\n$rows\n [1]   4  17  23  33  77  84  90 123  10  16  28  50  61  67  86 100\n[17]   5  11  30  44  56  66  95 110  38  51  72  76 105 111 117 128\n\nagricolae\nagricolae is motivated by agricultural applications although the designs are applicable across a variety of fields.\n\n\nlibrary(agricolae)\n\n\n\nThe functions to create the design all begin with the word “design.” and the names of the functions are remnant of the name of the experimental design. E.g. design.rcbd generates a Randomised Complete Block Design and design.split generates a Split Plot Design.\n\n\nls(\"package:agricolae\") %>% \n  str_subset(\"^design.\")\n\n\n [1] \"design.ab\"      \"design.alpha\"   \"design.bib\"    \n [4] \"design.crd\"     \"design.cyclic\"  \"design.dau\"    \n [7] \"design.graeco\"  \"design.lattice\" \"design.lsd\"    \n[10] \"design.mat\"     \"design.rcbd\"    \"design.split\"  \n[13] \"design.strip\"   \"design.youden\" \n\nRather than going through each of the functions, I’ll just show one. The command below generates a balanced incomplete block design with 7 treatments of block size 3. This the same design structure as the first example for AlgDesign. What do you think of the input and output?\n\n\ntrt <- LETTERS[1:7]\ndesign.bib(trt = trt, k = 3)\n\n\n\nParameters BIB\n==============\nLambda     : 1\ntreatmeans : 7\nBlock size : 3\nBlocks     : 7\nReplication: 3 \n\nEfficiency factor 0.7777778 \n\n<<< Book >>>\n$parameters\n$parameters$design\n[1] \"bib\"\n\n$parameters$trt\n[1] \"A\" \"B\" \"C\" \"D\" \"E\" \"F\" \"G\"\n\n$parameters$k\n[1] 3\n\n$parameters$serie\n[1] 2\n\n$parameters$seed\n[1] 1804898417\n\n$parameters$kinds\n[1] \"Super-Duper\"\n\n\n$statistics\n       lambda treatmeans blockSize blocks r Efficiency\nvalues      1          7         3      7 3  0.7777778\n\n$sketch\n     [,1] [,2] [,3]\n[1,] \"C\"  \"B\"  \"D\" \n[2,] \"A\"  \"E\"  \"B\" \n[3,] \"F\"  \"B\"  \"G\" \n[4,] \"G\"  \"C\"  \"E\" \n[5,] \"G\"  \"A\"  \"D\" \n[6,] \"A\"  \"F\"  \"C\" \n[7,] \"F\"  \"E\"  \"D\" \n\n$book\n   plots block trt\n1    101     1   C\n2    102     1   B\n3    103     1   D\n4    201     2   A\n5    202     2   E\n6    203     2   B\n7    301     3   F\n8    302     3   B\n9    303     3   G\n10   401     4   G\n11   402     4   C\n12   403     4   E\n13   501     5   G\n14   502     5   A\n15   503     5   D\n16   601     6   A\n17   602     6   F\n18   603     6   C\n19   701     7   F\n20   702     7   E\n21   703     7   D\n\nMore examples are given in the agricolae tutorial.\nlhs\nThe lhs package is completely different to the previous two packages. It implements methods for creating and augmenting Latin Hypercube Samples and Orthogonal Array Latin Hypercube Samples. The treatment variables here are the parameters and are continuous. In the example below, there are 10 parameters were 30 samples will be drawn from.\n\n\nlibrary(lhs)\n# a design with 30 samples from 10 parameters\nA <- randomLHS(30, 10)\nA\n\n\n            [,1]       [,2]       [,3]       [,4]        [,5]\n [1,] 0.85115160 0.80153721 0.26562089 0.24240381 0.386617133\n [2,] 0.03162770 0.11851068 0.20750833 0.22137816 0.737580563\n [3,] 0.94326309 0.99286802 0.55167951 0.04431126 0.073908842\n [4,] 0.15341898 0.23664814 0.45088836 0.02736497 0.276594703\n [5,] 0.53987796 0.69129259 0.61068716 0.68112190 0.840092421\n [6,] 0.34338962 0.91067411 0.50772141 0.46340514 0.543650700\n [7,] 0.87984431 0.18530938 0.28391957 0.80767211 0.636091307\n [8,] 0.74093451 0.94142899 0.47633881 0.93482745 0.101815507\n [9,] 0.22679294 0.05950478 0.70384589 0.84840308 0.046119869\n[10,] 0.59543890 0.14230001 0.91973016 0.38743743 0.008173053\n[11,] 0.71222052 0.84574251 0.05719443 0.33460392 0.414795358\n[12,] 0.31313954 0.55023270 0.67189798 0.98743475 0.480147544\n[13,] 0.06589897 0.02727366 0.94372045 0.11200430 0.776188787\n[14,] 0.67856942 0.64694630 0.11695731 0.57667893 0.576669680\n[15,] 0.60779222 0.47346774 0.57803451 0.77359785 0.686925390\n[16,] 0.77869112 0.45967726 0.97082607 0.72001527 0.158727598\n[17,] 0.47753672 0.33965295 0.34264293 0.88078583 0.932636317\n[18,] 0.24829930 0.28054142 0.82863690 0.48987801 0.831406425\n[19,] 0.63438918 0.62665931 0.19339855 0.63126047 0.222550404\n[20,] 0.42615936 0.78697269 0.31122846 0.54731724 0.618925200\n[21,] 0.98558294 0.31283813 0.79937608 0.09708168 0.974254219\n[22,] 0.82272308 0.72620385 0.63409490 0.51439160 0.888309555\n[23,] 0.28216288 0.40678670 0.00747647 0.15786391 0.462001814\n[24,] 0.44293885 0.88759165 0.87593133 0.17614748 0.301809115\n[25,] 0.91903885 0.58769320 0.85344414 0.73340894 0.261399107\n[26,] 0.39749211 0.21531852 0.40155710 0.40795272 0.175926862\n[27,] 0.53326444 0.09494134 0.36906730 0.28462433 0.521423827\n[28,] 0.12780125 0.76041647 0.14450865 0.32753635 0.958334555\n[29,] 0.19956924 0.39260007 0.76646006 0.65147638 0.353769748\n[30,] 0.09115621 0.53145384 0.09544316 0.91317843 0.722981039\n            [,6]       [,7]       [,8]       [,9]      [,10]\n [1,] 0.57523291 0.64829514 0.30957145 0.56063376 0.58060694\n [2,] 0.37572590 0.09386871 0.09460784 0.62699580 0.07496677\n [3,] 0.33729208 0.14971910 0.02306924 0.12609065 0.18310414\n [4,] 0.77521524 0.27273750 0.43275425 0.84548534 0.13991032\n [5,] 0.18545904 0.57024842 0.83876578 0.94430739 0.55675175\n [6,] 0.04848456 0.68468958 0.93462688 0.69388363 0.77296080\n [7,] 0.40499358 0.22736413 0.49914901 0.63951785 0.29475412\n [8,] 0.83195048 0.86262149 0.90864828 0.71549074 0.95154810\n [9,] 0.20549016 0.82450164 0.34137614 0.35590469 0.33383492\n[10,] 0.11180544 0.99755568 0.77506400 0.90850387 0.04070513\n[11,] 0.71230339 0.51386141 0.51188486 0.74575618 0.47042600\n[12,] 0.14900939 0.62716610 0.60853776 0.19349115 0.85808318\n[13,] 0.31845634 0.36810057 0.68906398 0.48416759 0.10075997\n[14,] 0.68236586 0.46367072 0.53735362 0.97946521 0.53084746\n[15,] 0.46043188 0.79151449 0.39841726 0.16295411 0.32738380\n[16,] 0.52748006 0.73055037 0.10636268 0.45184454 0.60852297\n[17,] 0.08469157 0.11492100 0.64512714 0.26197028 0.87144705\n[18,] 0.28007202 0.90350371 0.27696270 0.41905694 0.25261507\n[19,] 0.84219677 0.41560144 0.73423244 0.01653787 0.01640204\n[20,] 0.98370876 0.54984313 0.26617569 0.32944947 0.20285318\n[21,] 0.48614679 0.73515250 0.59964083 0.87721937 0.82147435\n[22,] 0.94892286 0.89461948 0.05944528 0.27581653 0.97355201\n[23,] 0.89070787 0.95209334 0.17557806 0.57880924 0.65490041\n[24,] 0.03273681 0.35714952 0.82135876 0.80705301 0.91792197\n[25,] 0.65831637 0.31657015 0.44139011 0.39117389 0.72964052\n[26,] 0.54073941 0.03568867 0.88231315 0.53096409 0.45227701\n[27,] 0.62613184 0.18195056 0.23326926 0.79716759 0.42737304\n[28,] 0.25256769 0.48629095 0.72335715 0.07429013 0.67936824\n[29,] 0.90342254 0.03184096 0.15672156 0.06023826 0.73960757\n[30,] 0.74109078 0.23509647 0.98392432 0.20423196 0.38968498\n\nlhs provides a number of methods to find the optimal design each with their own criteria.\n\n\nA1 <- optimumLHS(30, 10, maxSweeps = 4, eps = 0.01)\nA2 <- maximinLHS(30, 10, dup = 5)\nA3 <- improvedLHS(30, 10, dup = 5)\nA4 <- geneticLHS(30, 10, pop = 1000, gen = 8, pMut = 0.1, criterium = \"S\")\nA5 <- geneticLHS(30, 10, pop = 1000, gen = 8, pMut = 0.1, criterium = \"Maximin\")\n\n\n\nez\nThis is mainly focussed on the analysis of experimental data but some functions such as ezDesign is useful for viewing the experimental structure.\n\n\nlibrary(ez)\ndata(ANT2)\nezPrecis(ANT2)\n\n\nData frame dimensions: 5760 rows, 10 columns\n             type missing values      min         max\nsubnum    numeric       0     20        1          20\ngroup      factor       0      2  Control   Treatment\nblock     numeric       0      6        1           6\ntrial      factor       0     48        1          48\ncue        factor       0      4     None     Spatial\nflank      factor       0      3  Neutral Incongruent\nlocation   factor       0      2     down          up\ndirection  factor       0      2     left       right\nrt        numeric     144   5617 179.5972    657.6986\nerror     numeric     144      3        0           1\n\n\n\nezDesign(data = ANT2,\n         x = trial, \n         y = subnum,\n         row = block, \n         col = group)\n\n\n\n\nDoE.base\nDoE.base provides utility functions for the special class design and as seen in Figure 1, DoE.base is used by four other DoE packages that is maintained also by Prof. Dr. Ulrike Grömping.\nDoE.base contains functions to generate factorial designs easily.\n\n\nlibrary(DoE.base)\nfac.design(nlevels = c(2, 2, 3, 3, 6), \n           blocks = 6)\n\n\n   run.no run.no.std.rp Blocks A B C D E\n1       1        29.1.5      1 1 1 2 3 1\n2       2       89.1.15      1 1 1 2 2 3\n3       3      180.1.30      1 2 2 3 3 5\n4       4         4.1.2      1 2 2 1 1 1\n5       5       84.1.14      1 2 2 3 1 3\n6       6      160.1.28      1 2 2 1 2 5\n7       7      118.1.19      1 2 1 3 1 4\n8       8      186.1.31      1 2 1 2 1 6\n9       9       97.1.17      1 1 1 1 3 3\n10     10       92.1.16      1 2 2 2 2 3\n11     11      214.1.35      1 2 1 3 3 6\n12     12      194.1.33      1 2 1 1 2 6\n13     13        39.1.8      1 1 2 1 1 2\n14     14         1.1.1      1 1 1 1 1 1\n15     15      119.1.20      1 1 2 3 1 4\n16     16      127.1.22      1 1 2 2 2 4\n17     17      134.1.23      1 2 1 1 3 4\n18     18        58.1.9      1 2 1 3 2 2\n19     19      135.1.24      1 1 2 1 3 4\n20     20      149.1.25      1 1 1 2 1 5\n21     21       59.1.10      1 1 2 3 2 2\n22     22        38.1.7      1 2 1 1 1 2\n23     23       67.1.12      1 1 2 2 3 2\n24     24      195.1.34      1 1 2 1 2 6\n25     25        32.1.6      1 2 2 2 3 1\n26     26       66.1.11      1 2 1 2 3 2\n27     27      152.1.26      1 2 2 2 1 5\n28     28        21.1.3      1 1 1 3 2 1\n29     29      157.1.27      1 1 1 1 2 5\n30     30      215.1.36      1 1 2 3 3 6\n31     31      100.1.18      1 2 2 1 3 3\n32     32      187.1.32      1 1 2 2 1 6\n33     33      177.1.29      1 1 1 3 3 5\n34     34      126.1.21      1 2 1 2 2 4\n35     35       81.1.13      1 1 1 3 1 3\n36     36        24.1.4      1 2 2 3 2 1\n   run.no run.no.std.rp Blocks A B C D E\n37     37        16.2.4      2 2 2 1 2 1\n38     38      169.2.29      2 1 1 1 3 5\n39     39        43.2.8      2 1 2 2 1 2\n40     40      199.2.34      2 1 2 2 2 6\n41     41      104.2.18      2 2 2 2 3 3\n42     42      206.2.35      2 2 1 1 3 6\n43     43      131.2.22      2 1 2 3 2 4\n44     44      138.2.23      2 2 1 2 3 4\n45     45      172.2.30      2 2 2 1 3 5\n46     46      110.2.19      2 2 1 1 1 4\n47     47      161.2.27      2 1 1 2 2 5\n48     48         5.2.1      2 1 1 2 1 1\n49     49        42.2.7      2 2 1 2 1 2\n50     50       73.2.13      2 1 1 1 1 3\n51     51      191.2.32      2 1 2 3 1 6\n52     52       93.2.15      2 1 1 3 2 3\n53     53      156.2.26      2 2 2 3 1 5\n54     54       96.2.16      2 2 2 3 2 3\n55     55       51.2.10      2 1 2 1 2 2\n56     56      101.2.17      2 1 1 2 3 3\n57     57        13.2.3      2 1 1 1 2 1\n58     58      111.2.20      2 1 2 1 1 4\n59     59      130.2.21      2 2 1 3 2 4\n60     60       76.2.14      2 2 2 1 1 3\n61     61      198.2.33      2 2 1 2 2 6\n62     62      190.2.31      2 2 1 3 1 6\n63     63        33.2.5      2 1 1 3 3 1\n64     64      153.2.25      2 1 1 3 1 5\n65     65      164.2.28      2 2 2 2 2 5\n66     66        50.2.9      2 2 1 1 2 2\n67     67      207.2.36      2 1 2 1 3 6\n68     68       71.2.12      2 1 2 3 3 2\n69     69        36.2.6      2 2 2 3 3 1\n70     70         8.2.2      2 2 2 2 1 1\n71     71       70.2.11      2 2 1 3 3 2\n72     72      139.2.24      2 1 2 2 3 4\n    run.no run.no.std.rp Blocks A B C D E\n73      73       85.3.15      3 1 1 1 2 3\n74      74      105.3.17      3 1 1 3 3 3\n75      75        17.3.3      3 1 1 2 2 1\n76      76      211.3.36      3 1 2 2 3 6\n77      77      114.3.19      3 2 1 2 1 4\n78      78        47.3.8      3 1 2 3 1 2\n79      79       55.3.10      3 1 2 2 2 2\n80      80      182.3.31      3 2 1 1 1 6\n81      81      168.3.28      3 2 2 3 2 5\n82      82      165.3.27      3 1 1 3 2 5\n83      83      142.3.23      3 2 1 3 3 4\n84      84      145.3.25      3 1 1 1 1 5\n85      85       62.3.11      3 2 1 1 3 2\n86      86      148.3.26      3 2 2 1 1 5\n87      87      108.3.18      3 2 2 3 3 3\n88      88        25.3.5      3 1 1 1 3 1\n89      89         9.3.1      3 1 1 3 1 1\n90      90       77.3.13      3 1 1 2 1 3\n91      91      122.3.21      3 2 1 1 2 4\n92      92        12.3.2      3 2 2 3 1 1\n93      93        46.3.7      3 2 1 3 1 2\n94      94       88.3.16      3 2 2 1 2 3\n95      95        20.3.4      3 2 2 2 2 1\n96      96        54.3.9      3 2 1 2 2 2\n97      97      203.3.34      3 1 2 3 2 6\n98      98       80.3.14      3 2 2 2 1 3\n99      99      123.3.22      3 1 2 1 2 4\n100    100      173.3.29      3 1 1 2 3 5\n101    101        28.3.6      3 2 2 1 3 1\n102    102      176.3.30      3 2 2 2 3 5\n103    103      202.3.33      3 2 1 3 2 6\n104    104      115.3.20      3 1 2 2 1 4\n105    105      210.3.35      3 2 1 2 3 6\n106    106      183.3.32      3 1 2 1 1 6\n107    107       63.3.12      3 1 2 1 3 2\n108    108      143.3.24      3 1 2 3 3 4\n    run.no run.no.std.rp Blocks A B C D E\n109    109      179.4.30      4 1 2 3 3 5\n110    110      151.4.26      4 1 2 2 1 5\n111    111       60.4.10      4 2 2 3 2 2\n112    112        31.4.6      4 1 2 2 3 1\n113    113         3.4.2      4 1 2 1 1 1\n114    114        22.4.3      4 2 1 3 2 1\n115    115       99.4.18      4 1 2 1 3 3\n116    116        30.4.5      4 2 1 2 3 1\n117    117       68.4.12      4 2 2 2 3 2\n118    118      196.4.34      4 2 2 1 2 6\n119    119       90.4.15      4 2 1 2 2 3\n120    120        57.4.9      4 1 1 3 2 2\n121    121      158.4.27      4 2 1 1 2 5\n122    122      193.4.33      4 1 1 1 2 6\n123    123      136.4.24      4 2 2 1 3 4\n124    124       82.4.13      4 2 1 3 1 3\n125    125       65.4.11      4 1 1 2 3 2\n126    126        37.4.7      4 1 1 1 1 2\n127    127      120.4.20      4 2 2 3 1 4\n128    128      178.4.29      4 2 1 3 3 5\n129    129      128.4.22      4 2 2 2 2 4\n130    130      188.4.32      4 2 2 2 1 6\n131    131         2.4.1      4 2 1 1 1 1\n132    132       91.4.16      4 1 2 2 2 3\n133    133      185.4.31      4 1 1 2 1 6\n134    134      159.4.28      4 1 2 1 2 5\n135    135       98.4.17      4 2 1 1 3 3\n136    136        40.4.8      4 2 2 1 1 2\n137    137      150.4.25      4 2 1 2 1 5\n138    138      125.4.21      4 1 1 2 2 4\n139    139       83.4.14      4 1 2 3 1 3\n140    140      133.4.23      4 1 1 1 3 4\n141    141        23.4.4      4 1 2 3 2 1\n142    142      117.4.19      4 1 1 3 1 4\n143    143      216.4.36      4 2 2 3 3 6\n144    144      213.4.35      4 1 1 3 3 6\n    run.no run.no.std.rp Blocks A B C D E\n145    145      171.5.30      5 1 2 1 3 5\n146    146      102.5.17      5 2 1 2 3 3\n147    147      162.5.27      5 2 1 2 2 5\n148    148      112.5.20      5 2 2 1 1 4\n149    149      154.5.25      5 2 1 3 1 5\n150    150       74.5.13      5 2 1 1 1 3\n151    151      163.5.28      5 1 2 2 2 5\n152    152        15.5.4      5 1 2 1 2 1\n153    153       72.5.12      5 2 2 3 3 2\n154    154       95.5.16      5 1 2 3 2 3\n155    155      205.5.35      5 1 1 1 3 6\n156    156        35.5.6      5 1 2 3 3 1\n157    157         7.5.2      5 1 2 2 1 1\n158    158      129.5.21      5 1 1 3 2 4\n159    159         6.5.1      5 2 1 2 1 1\n160    160       75.5.14      5 1 2 1 1 3\n161    161      208.5.36      5 2 2 1 3 6\n162    162        14.5.3      5 2 1 1 2 1\n163    163       94.5.15      5 2 1 3 2 3\n164    164      132.5.22      5 2 2 3 2 4\n165    165        34.5.5      5 2 1 3 3 1\n166    166       69.5.11      5 1 1 3 3 2\n167    167      170.5.29      5 2 1 1 3 5\n168    168      137.5.23      5 1 1 2 3 4\n169    169       52.5.10      5 2 2 1 2 2\n170    170      155.5.26      5 1 2 3 1 5\n171    171        49.5.9      5 1 1 1 2 2\n172    172      200.5.34      5 2 2 2 2 6\n173    173        41.5.7      5 1 1 2 1 2\n174    174      192.5.32      5 2 2 3 1 6\n175    175        44.5.8      5 2 2 2 1 2\n176    176      140.5.24      5 2 2 2 3 4\n177    177      197.5.33      5 1 1 2 2 6\n178    178      109.5.19      5 1 1 1 1 4\n179    179      103.5.18      5 1 2 2 3 3\n180    180      189.5.31      5 1 1 3 1 6\n    run.no run.no.std.rp Blocks A B C D E\n181    181      106.6.17      6 2 1 3 3 3\n182    182      146.6.25      6 2 1 1 1 5\n183    183       79.6.14      6 1 2 2 1 3\n184    184        53.6.9      6 1 1 2 2 2\n185    185      209.6.35      6 1 1 2 3 6\n186    186       64.6.12      6 2 2 1 3 2\n187    187      166.6.27      6 2 1 3 2 5\n188    188        19.6.4      6 1 2 2 2 1\n189    189      204.6.34      6 2 2 3 2 6\n190    190        26.6.5      6 2 1 1 3 1\n191    191       78.6.13      6 2 1 2 1 3\n192    192       56.6.10      6 2 2 2 2 2\n193    193      181.6.31      6 1 1 1 1 6\n194    194      174.6.29      6 2 1 2 3 5\n195    195       87.6.16      6 1 2 1 2 3\n196    196        10.6.1      6 2 1 3 1 1\n197    197      212.6.36      6 2 2 2 3 6\n198    198      147.6.26      6 1 2 1 1 5\n199    199      107.6.18      6 1 2 3 3 3\n200    200        48.6.8      6 2 2 3 1 2\n201    201      116.6.20      6 2 2 2 1 4\n202    202       86.6.15      6 2 1 1 2 3\n203    203      184.6.32      6 2 2 1 1 6\n204    204        27.6.6      6 1 2 1 3 1\n205    205      124.6.22      6 2 2 1 2 4\n206    206      141.6.23      6 1 1 3 3 4\n207    207      201.6.33      6 1 1 3 2 6\n208    208        18.6.3      6 2 1 2 2 1\n209    209        45.6.7      6 1 1 3 1 2\n210    210      113.6.19      6 1 1 2 1 4\n211    211      167.6.28      6 1 2 3 2 5\n212    212      121.6.21      6 1 1 1 2 4\n213    213      144.6.24      6 2 2 3 3 4\n214    214       61.6.11      6 1 1 1 3 2\n215    215      175.6.30      6 1 2 2 3 5\n216    216        11.6.2      6 1 2 3 1 1\nclass=design, type= full factorial.blocked \nNOTE: columns run.no and run.no.std.rp  are annotation, \n not part of the data frame\n\nIt also contains functions to create orthogonal array designs.\n\n\ndes <- oa.design(nlevels = c(rep(2, 8), 8))\ndes\n\n\n   A B C D E F G H J\n1  1 2 1 2 2 1 2 1 6\n2  2 1 2 1 2 1 2 1 2\n3  2 1 1 2 2 1 1 2 4\n4  2 2 1 1 2 2 1 1 3\n5  1 1 1 1 2 2 2 2 5\n6  1 1 2 2 2 2 1 1 7\n7  1 2 1 2 1 2 1 2 2\n8  1 1 1 1 1 1 1 1 1\n9  1 2 2 1 2 1 1 2 8\n10 1 1 2 2 1 1 2 2 3\n11 2 1 2 1 1 2 1 2 6\n12 2 1 1 2 1 2 2 1 8\n13 2 2 2 2 1 1 1 1 5\n14 2 2 1 1 1 1 2 2 7\n15 1 2 2 1 1 2 2 1 4\n16 2 2 2 2 2 2 2 2 1\nclass=design, type= oa \n\nIf you need to further randomise within a specified block, you can do this using rerandomize.design.\n\n\nrerandomize.design(des, block = \"J\")\n\n\n  run.no run.no.std.rp J A B C D E F G H\n1      1         4.7.1 7 1 1 2 2 2 2 1 1\n2      2        13.7.2 7 2 2 1 1 1 1 2 2\n  run.no run.no.std.rp J A B C D E F G H\n3      3         7.4.1 4 1 2 2 1 1 2 2 1\n4      4        10.4.2 4 2 1 1 2 2 1 1 2\n  run.no run.no.std.rp J A B C D E F G H\n5      5        12.2.2 2 2 1 2 1 2 1 2 1\n6      6         5.2.1 2 1 2 1 2 1 2 1 2\n  run.no run.no.std.rp J A B C D E F G H\n7      7        11.6.2 6 2 1 2 1 1 2 1 2\n8      8         6.6.1 6 1 2 1 2 2 1 2 1\n   run.no run.no.std.rp J A B C D E F G H\n9       9         9.8.2 8 2 1 1 2 1 2 2 1\n10     10         8.8.1 8 1 2 2 1 2 1 1 2\n   run.no run.no.std.rp J A B C D E F G H\n11     11         3.3.1 3 1 1 2 2 1 1 2 2\n12     12        14.3.2 3 2 2 1 1 2 2 1 1\n   run.no run.no.std.rp J A B C D E F G H\n13     13        16.1.2 1 2 2 2 2 2 2 2 2\n14     14         1.1.1 1 1 1 1 1 1 1 1 1\n   run.no run.no.std.rp J A B C D E F G H\n15     15         2.5.1 5 1 1 1 1 2 2 2 2\n16     16        15.5.2 5 2 2 2 2 1 1 1 1\nclass=design, type= oa.blocked \nNOTE: columns run.no and run.no.std.rp  are annotation, \n not part of the data frame\n\nSo those were the top 5 DoE packages. The API of the packages are quite distinct. The object that it outputs can vary from a matrix to a list. DoE might be a dull area for many but it’s quite important for the downstream analysis. Perhaps if many of us talk more about it, it may help invigorate the area!\n\n\nfunction showscript() {\n  var x = document.getElementsByClassName('toggle-code');\n  var n = x.length;\n  for (var i = 0; i < n; i++) {\n    var e = x[i];\n    if (e.style.display == \"block\") {\n      e.style.display = \"none\";\n    } else {\n      e.style.display = \"block\";\n    }\n  }\n}\n\n\n\n\nCarnell, Rob. 2020. Lhs: Latin Hypercube Samples. https://CRAN.R-project.org/package=lhs.\n\n\nChatfield, C. 1985. “The Initial Examination of Data.” Journal of the Royal Statistical Society. Series A 148 (3): 214–53.\n\n\nde Mendiburu, Felipe. 2020. Agricolae: Statistical Procedures for Agricultural Research. https://CRAN.R-project.org/package=agricolae.\n\n\nGrömping, Ulrike. 2018. “R Package DoE.base for Factorial Experiments.” Journal of Statistical Software 85 (5): 1–41. https://doi.org/10.18637/jss.v085.i05.\n\n\nLawrence, Michael A. 2016. Ez: Easy Analysis and Visualization of Factorial Experiments. https://CRAN.R-project.org/package=ez.\n\n\nMorgan-Wall, Tyler. 2017. Adjustedcranlogs: Remove Automated and Repeated Downloads from ’Rstudio’ ’Cran’ Download Logs. https://CRAN.R-project.org/package=adjustedcranlogs.\n\n\nWheeler, Bob. 2019. AlgDesign: Algorithmic Experimental Design. https://CRAN.R-project.org/package=AlgDesign.\n\n\nAt least from my teaching experience, statistics subjects are primary about the analysis and most research grants I’ve seen are about an analytical method. The analytical focus is reflected also in the R packages; there are 1,779 R-packages on CRAN with the word “analysis” in the title as opposed to 257 R-packages with the word “design” in its title.↩︎\nKeeping in mind though that your analysis plan may change once you actually have collected data. This is quite common in the analysis of plant breeding trials since some spatial variation only become apparent only after the data collection.↩︎\nI originally had a webscrapping error where I didn’t remove duplicate entries so numbers presented at TokyoR and SSA Webinar had the wrong numbers.↩︎\nAs of 2021-02-07.↩︎\n",
    "preview": "posts/2021-02-03-current-state-of-experimental-design-r-packages/figures/download-timeplot-1.png",
    "last_modified": "2021-02-07T18:36:14+11:00",
    "input_file": {},
    "preview_width": 1248,
    "preview_height": 1344
  },
  {
    "path": "posts/2021-01-29-uml-seq-diag/",
    "title": "Drawing a UML Sequence Diagram",
    "description": "Search for the way to draw a UML sequence diagram.",
    "author": [
      {
        "name": "Emi Tanaka",
        "url": "https://emitanaka.org"
      }
    ],
    "date": "2021-01-29",
    "categories": [
      "visualisation",
      "diagram"
    ],
    "contents": "\n\nContents\nOmnigraffle\nOnline tools\nR\nDiagrammeR\nnomnoml\nplantuml\n\n\nA sequence diagram, as described in wikipedia, shows objects interactions arranged in time sequence. One of the standards for drawing this is using the Unified Modelling Language (UML) managed by the Object Management Group (OMG).\nUML was developed in the field of software engineering to provide a standard way to visualise the design of a system. It’s a language that describes standards for all sorts of diagrams, not just the sequence diagram, e.g. communication diagram, interaction overview diagram and so on.\nThe interaction of actors with the system depicted as objects with passage of time depicted as a vertical dotted line (a.k.a. lifeline) seemed like a good fit to use for illustrating the concept of edibble.\nOmnigraffle\nI always find drawing complicated diagrams to be tricky via programming so I initially drew the diagram using OmniGraffle. There were some UML stencils and I thought it was going well (result in Figure 1). Aligning the objects as a sequence diagram, even with OmniGraffle’s precise object placement, was a bit difficult but it got the job done in the end.\n\n\n\nFigure 1: Drawn using OmniGraffle\n\n\n\nThen I wanted to change and reorder some elements of the diagram. It’s already taken me half a day to make a Figure 1, I really didn’t want to repeat the process. Surely, there must be another tool that will make this easier?\nOnline tools\nAnd thus began my journey (and what felt like a rabbit hole) in finding other tools to draw a sequence diagram. I found several online mapping solutions including Lucidchart and Visual Paradigm but it wasn’t what I was after. Eventually I came across GitMind. It was the most promising to me: it has a nice user interface, the features that I want and it happened to be completely free! It was easier than OmniGraffle to make sequence diagrams. You can find the result of the drawing in Figure 2.\n\n\n\nFigure 2: Drawn using GitMind.\n\n\n\nOne thing to keep in mind is that the font for the PDF version is not rendered correctly. This is perhaps I’ve chosen a font available only in my system (“Fira Code”).\nOkay, looks like I’m good with this. Let’s use this in the edibble documentation… Wait the interaction between the statisitican and Design doesn’t fit the narrative well, I need to modify the diagram again!\nThis was a point when I realise I really need to programmatically create the diagram. Being somewhat of an anti click-and-point statistical software, I should have perhaps pursued the programmatic route earlier.\nR\nThe most comprehensive R-package to draw a diagram is DiagrammeR. When you go to the website (which has an impressively interface) it has the tagline “Sometimes You Want To Create Nice Diagrams: WHY NOT DO THAT WITH R?”. That’s a good question to ask past Emi.\nDiagrammeR\nUnder the hood, DiagrammeR it’s powered by Graphviz and mermaid. Sequence diagrams are supported by mermaid but there seems to be no distinguishment between an actor and an object. It seems like you always have to a message when actor/object is interacting.\n\n\nDiagrammeR::mermaid(\"\nsequenceDiagram\n    domain expert->>statistician: consult\n    statistician-->>domain expert: query\n    statistician->>Design: start_design()\n    statistician->>Design: set_units()\")\n\n\n\n\n{\"x\":{\"diagram\":\"\\nsequenceDiagram\\n    domain expert->>statistician: consult\\n    statistician-->>domain expert: query\\n    statistician->>Design: start_design()\\n    statistician->>Design: set_units()\"},\"evals\":[],\"jsHooks\":[]}\nFigure 3: Drawn using mermaid via DiagrammeR\n\n\n\nIt’s fairly good and you can further customise the look using CSS, but it doesn’t have the actor symbol and some other standard UML symbols, it will be too much effort by me to recreate what I made using GitMind.\nnomnoml\n\n\n\nFigure 4: Drawn using nomnoml.com\n\n\n\nThe nomnoml R-package describes itself as a Sassy UML Diagrams for R. It’s powered by the nomnoml tool which has a nice simple website to create the diagrams you want. I quite enjoy using the website version where the graph renders instantenously using a simple syntax. The graph made using the web (Figure 4) is different to the one produced via R shown below along with the nomnoml syntax.\n\n[<actor>domain expert] -- [<hidden> fin1]\n[<actor>statistician] -- [<hidden> fin2]\n[design] -- [<end> end]\n[<database> data] -- [<hidden> hid]\n[<actor>technician] -- [<hidden> fin3]\n\n{\"x\":{\"code\":\"\\n#fill: #FEFEFF\\n#lineWidth: 1\\n#zoom: 4\\n#direction: right\\n\\n[<actor>domain expert] -- [<hidden> fin1]\\n[<actor>statistician] -- [<hidden> fin2]\\n[design] -- [<end> end]\\n[<database> data] -- [<hidden> hid]\\n[<actor>technician] -- [<hidden> fin3]\",\"svg\":false},\"evals\":[],\"jsHooks\":[]}\nIt turns out thought that the nomnoml doesn’t support sequence diagrams and it doesn’t look like it will support it any time either.\nplantuml\nI came across another R-package for UML diagrams called plantuml. It’s powered by the the plantUML tool which has a extensive support for a sequence diagram (yes!).\nThis one is not on CRAN yet. I initially had trouble getting it to work but managed to work re-installing GraphViz. I could get the example code to work but the code for sequence diagram didn’t work for me so I used the online version of plantUML directly.\nI expanded a lot more than previous graphs with plantUML code below. The problem I realise now is that the image has become too big and too much text to be concise. So I’ll have to tweak some more (when does this end?). At least now making an adjustment isn’t hard this time!\n@startuml\nactor \"domain expert\" as expert #fff\nactor statistician as stat #AD0059\nparticipant design as design #fff\ndatabase data as data #fff\nactor technician as tech #fff\n== Conceptualizing the experiment ==\ngroup Consultation\nexpert -> stat: I want to test which wheat variety is best\nstat -> design: library(edibble)\\nstart_design(name = \"wheat\")\nactivate design\nstat -> design: set_context(aim = \"identify best variety\")\nstat -> expert: What varieties are you testing?\nexpert -->> stat: I'm testing Mace and RockStar\nstat -> design: set_trts(var = c(\"Mace\", \"RockStar\"))\nexpert -->> stat: I have a field with 20 plots each at Narrabri and\\n10 plots at Roseworthy that I can use for testing\nstat -> design: set_units(site = c(\"Narrabri\", \"Roseworthy\"),\\n.               plot = nested_in( site,\\n                                    \"Narrabri\" ~ 20,\\n                              \"Roseworthy\" ~ 10))\nstat -> expert: What do you consider as \"best\"?\nexpert -> stat: For now, I just want to select one that'll give me\\nthe highest yield.\nstat -> design: set_rcrds(yield = plot)\nstat -> expert: What's range of values do you expect for the yield?\nexpert -->> stat: Well it never goes over 10 tonnes per hectre in my fields!\nstat -> design: expect_rcrds(yield = to_be_numeric( with_value( between = c(0, 10))))\nstat -> expert: Do you have any restrictions in allocation of varieties at site or plots?\nexpert -->> stat: No.\nstat -> design: allocate_trts(var ~ plot)\nstat -> design: plot()\ndesign -->> stat\nstat -> expert: Well, this is my current understanding of the structure.\\nHave I understood it correctly?\nexpert -->> stat: That looks right.\nstat -->> expert: Okay I'll send the design when it's ready.\nend \nstat -> design: **randomise_trts()**\nstat -> design: serve_table()\ndesign -> data: export_design()\nactivate data\ndeactivate design\nstat -> design !!: end session\nexpert -> data: inspect\ntech -> data: inquire\ntech -> data: data entry\ngroup opt [invalid entry]\ndata -->> tech: error\nend\n== Import data and analyse==\n@enduml\n\n\n\nFigure 5: Drawn using plantUML\n\n\n\nIn the end the solution wasn’t quite R, but perhaps it will be when the plantuml package upgrades or other solutions are developed.\n\n\n\n",
    "preview": "posts/2021-01-29-uml-seq-diag/seq-diag-omnigraffle.png",
    "last_modified": "2021-02-03T08:54:04+11:00",
    "input_file": {},
    "preview_width": 863,
    "preview_height": 708
  },
  {
    "path": "posts/travel2019/",
    "title": "My Travel Schedule 2019: Building an interactive visualisation as twitter card",
    "description": "Making an interactive schedule heat map with\ninteractive twitter card display.",
    "author": [
      {
        "name": "Emi Tanaka",
        "url": "https://emitanaka.org"
      }
    ],
    "date": "2019-03-26",
    "categories": [
      "visualisation",
      "interactive"
    ],
    "contents": "\n\n\n\n\n\n{\"x\":{\"url\":\"travel2019_files/figure-html5//widgets/widget_travelschedule.html\",\"options\":{\"xdomain\":\"*\",\"allowfullscreen\":false,\"lazyload\":false}},\"evals\":[],\"jsHooks\":[]}\n Hovering over the above graph will show you more details. This year I have a fair bit of travel scheduled including:\nEco Sta 2019 at Taichung, Taiwan,\nISI WSC 2019 at Kuala Lumpur, Malaysia,\nYSC 2019 at Canberra, Australia, and\nBiometrics by the Botanic Garden 2019 at Adelaide, Australia.\nIf you happen to be going to the same conference as myself, do get in touch and maybe you can pay for my taxi? :) (I forgot to put it in my budget …)\nThe code to make the above graph is shown below. This post benefit largely from this post here to turn plotly output into interactive twitter card.\n\n\nlibrary(tidyverse)\nlibrary(tsibble)\nlibrary(googlesheets)\nlibrary(highcharter)\nlibrary(widgetframe)\n\n# get the data\ndate_range <- tibble(\n  Dates = as.Date(c(\"06/03/2019\", \"12/31/2019\"), format = \"%m/%d/%Y\"),\n  Location = \"Sydney, Australia\"\n) # the start to end for schedule show\nkey <- gs_key(\"1T7aH5PzQghU0htnqOjzzEyfe0qdWs_L-1Ybu9PX-rYY\")\ntravel_df <- gs_read(key, col_types = list()) %>%\n  mutate(\n    Start = as.Date(Start, format = \"%m/%d/%Y\"),\n    End = as.Date(End, format = \"%m/%d/%Y\")\n  ) %>%\n  pivot_longer(Start:End, names_to = \"Time\", values_to = \"Dates\") %>%\n  as_tsibble(key = Event, index = Dates) %>%\n  fill_gaps(Time = \"Between\") %>%\n  group_by(Event) %>%\n  fill(FullEvent, URL, Location, What, .direction = \"down\") %>%\n  ungroup() %>% # this part feels clumsy.. probably better way to do this\n  bind_rows(date_range) %>%\n  as_tibble() %>%\n  mutate(Key = \"All\") %>%\n  as_tsibble(key = Key, index = Dates) %>%\n  fill_gaps(Location = \"Sydney, Australia\", Event = \"\", What = \"\", FullEvent = \"\") %>%\n  mutate(\n    Day = substring(weekdays(Dates), 1, 3),\n    Week = lubridate::isoweek(Dates)\n  ) %>%\n  filter(Week != 1)\n\n\n\n\n\nfntltp <- JS(\"function(){\n              return '<b style=\\\"color:#DC5084\\\">' + this.point.event + '<\/b><br><span style=\\\"font-size:0.7em\\\">' +  this.series.yAxis.categories[this.point.y] + ', ' +\n             this.point.date + '<\/span><br><span style=\\\"font-size:0.7em\\\">' + this.point.name + '<\/span><br><span style=\\\"font-size:0.7em;color:#FFFFCC\\\">' + this.point.what + '<\/span><br>'+ this.point.loc;\n             }\")\n\nhcout <- hchart(travel_df, \"heatmap\", hcaes(\n  x = factor(Week),\n  y = factor(Day, levels = c(\"Sun\", \"Sat\", \"Fri\", \"Thu\", \"Wed\", \"Tue\", \"Mon\")),\n  group = Location,\n  loc = Location,\n  event = Event,\n  what = What,\n  name = FullEvent,\n  date = Dates\n),\nstyle = list(fontSize = \"2em\", fontFamily = \"Helvetica\")\n) %>%\n  hc_tooltip(formatter = fntltp) %>%\n  # hc_tooltip(crosshairs=TRUE, pointFormat = \"y: {point.y}<br>x: {point.x}\") %>%\n  hc_title(text = \"My 2019 Travel Schedule\", style = list(fontWeight = \"bold\")) %>%\n  hc_subtitle(text = \"Hover over the tile to see more information\") %>%\n  hc_size(height = 225) %>%\n  hc_legend(enabled = FALSE) %>%\n  hc_yAxis(title = \"\") %>%\n  hc_xAxis(\n    title = \"\", categories = c(\"Jun\", \"\", \"\", \"\", \"Jul\", \"\", \"\", \"\", \"Aug\", \"\", \"\", \"\", \"Sep\", \"\", \"\", \"\", \"\", \"Oct\", \"\", \"\", \"\", \"Nov\", \"\", \"\", \"\", \"Dec\", \"\", \"\", \"\"),\n    endOnTick = FALSE\n  ) %>%\n  hc_add_theme(hc_theme_538()) %>%\n  hc_plotOptions(heatmap = list(borderColor = \"black\", borderWidth = 1))\n\nframeWidget(hcout)\n\n\n\n\n\n\n",
    "preview": {},
    "last_modified": "2021-02-03T08:53:28+11:00",
    "input_file": {}
  },
  {
    "path": "posts/hexsticker/",
    "title": "Making a Hexagon Sticker",
    "description": "Making hexagon stickers have become popular for\nR-packages with the range of packages associated with\nRStudio, such as `ggplot2`, `knitr`, `devtools` and so\non, having its own hex stickers. For the sticker that I\nmade for my R-package I found it easier, partly due to\nits long name, to use powerpoint to manipulate the\nimage and create a semi-circular text.",
    "author": [
      {
        "name": "Emi Tanaka",
        "url": "https://emitanaka.org"
      }
    ],
    "date": "2018-04-06",
    "categories": [
      "fun"
    ],
    "contents": "\n Making hexagon stickers have become popular for R-packages with the range of packages associated with RStudio, such as ggplot2, knitr, devtools and so on, having its own hex stickers.\nThis trend even spanned a R-package hexSticker that can be found here.\nPowerpoint template for hex stickers\nFor the sticker that I made for my R-package shinycustomloader, I found it easier, partly due to its long name, to use powerpoint to manipulate the image and create a semi-circular text. It took longer than what I had hoped to get the hexagon shape right. You may like to save your own time by downloading my powerpoint template here as a base to make your own.\nThe dimensions were set, as it is in hexSticker, so that you can print it according to http://hexb.in/sticker.html.\nUsing copyright images in hex stickers\nIt’s worth noting about copyright of images since you may like to use images in your hex sticker. If you created the image on your own then the copyright in general will rest with you and there is no problem. If you borrow images from others, you may need to provide attribution depending on their license permission.\nIn hex stickers, you don’t really have a room to add citations so you may like to use those that require no attribution. For free ones, you can find these using sites such as flickr under Public Domain works (CC0).\nIt is a bit painful to consider copyright issues but it is important to give due credit, acknowledgement, attribution etc to the creator of the work. I’ve gone to great lengths at times to search for CC0 images or have paid for work. Afterall, creative work is valuable and should be properly rewarded.\nUPDATE 22/06 My sticker arrived! They are pretty good quality! I also got 16 which is more than the 10 sample they said on the website \n\nThese are from sticker mule. If you sign up with referral code here, both you and I will get some credit. You are, of course, welcomed to just go directly to the site to make the purchase.\n\nUPDATE 20/06/2021 When ordering an R-package hex sticker from sticker mule, I choose Stickers > Die cut stickers > Custom dimension of 1.73\" x 1.99\".\n\n\n\n",
    "preview": "posts/hexsticker/hexsticker.gif",
    "last_modified": "2021-06-20T10:40:42+10:00",
    "input_file": {}
  }
]
